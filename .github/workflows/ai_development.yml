name: AI Development Workflow

on:
  issues:
    types: [labeled, opened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  ai-dev-orchestrator:
    if: contains(github.event.issue.labels.*.name, 'ai-development')
    runs-on: ubuntu-latest
    
    steps:
    - name: Comprehensive System Diagnostics
      run: |
        echo "Workflow Triggered Information:"
        echo "- Event Name: ${{ github.event_name }}"
        echo "- Repository: ${{ github.repository }}"
        echo "- Ref: ${{ github.ref }}"
        echo "- Actor: ${{ github.actor }}"
        
        echo "\n--- System Information ---"
        uname -a
        lsb_release -a
        
        echo "\n--- Python Diagnostics ---"
        which python
        python --version
        python -m pip --version
    
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install groq pytest
    
    - name: Repository Structure
      run: |
        echo "--- Repository Contents ---"
        tree -L 2
        
        echo "\n--- Requirements ---"
        cat requirements.txt
    
    - name: Run AI Development Script
      env:
        GROQ_API_KEY: ${{ secrets.GROQ }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python src/main.py || echo "Script execution failed"
    
    - name: Create AI-Generated Artifacts
      run: |
        git config user.name 'AI Development Bot'
        git config user.email 'ai-bot@github.com'
        
        # Create a unique branch for generated code
        BRANCH_NAME="ai-generated-$(date +"%Y%m%d-%H%M%S")"
        git checkout -b "$BRANCH_NAME"
        
        # Stage all changes
        git add .
        
        # Commit changes if any
        git commit -m "AI Generated Code from Issue #${{ github.event.issue.number }}" || echo "No changes to commit"
        
        # Push the branch
        git push origin "$BRANCH_NAME"
    
    - name: Create Pull Request
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create \
          --base main \
          --head "$BRANCH_NAME" \
          --title "AI Generated Code for Issue #${{ github.event.issue.number }}" \
          --body "Automated code generation based on issue description.
          
          Triggered by: ${{ github.actor }}
          Issue Link: ${{ github.event.issue.html_url }}"

    - name: Add Comment to Issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue comment ${{ github.event.issue.number }} \
          --body "âœ… AI Development Workflow completed.
          
          Generated code has been committed to branch: \`$BRANCH_NAME\`
          Pull Request: Pending review"